var search_data = {"index":{"searchIndex":["eve","api","connectivity","request","response","result","row","rowset","services","account","character","corporation","eve","map","misc","server","errors","authenticationerror","authenticationerrors","authenticationfailure","cachedkeyauthfailure","inadequatesecuritylevel","lastauthenticationfailure","logindenied","missingroles","notavailable","notinalliance","wrongaccount","internalerror","internalerrors","csvmismatch","cacheutilmissing","characterinformationfailure","corporationinformationfailure","factionmemberinformationfailure","invalidaccountkey","invalidattribute","invalidbloodline","invalidcharid","invalidcorpid","invalidcredentials","invalidgender","invalidinput","invalidornotloaded","invalidrace","invalidreftype","invaliduserid","mailnotavailable","medalinformationfailure","missingcorporation","notificationsnotavailable","nullattributeid","rolesqueryfailure","starbasedetailfailure","tqtimefailure","unexpecteddatabasefailure","userinformationfailure","invalidrowset","miscellaneouserror","miscellaneouserrors","backenddatabasedisabled","betainprogress","ratelimited","sitedatabasedisabled","testerrorforced","unknownerror","userinputerror","userinputerrors","accountkeyoutofbounds","assetsalreadydownloaded","characternotenlisted","corporationnotenlisted","industryjobsalreadydownloaded","invalidaccountkey","invalidbeforekillid","invalidbeforerefid","invalidbeforetransid","invalidcharacterid","invalididlist","invalidinteger","invaliditemid","invalidnamelist","keynotfound","killsexhausted","killsnotloaded","killspreviouslyloaded","marketordersalreadydownloaded","missinguserid","retrylater","versionescalationnotallowed","versionmismatch","walletexhausted","walletnotloaded","walletpreviouslyloaded","javascripthelper","railtie","trust","controllerhelpers","igbinterface","version","[]()","[]()","[]=()","account_balance()","account_balance()","all_fields()","alliance_id()","alliance_id()","alliance_ids()","alliance_list()","alliance_name()","alliance_name()","alliance_names()","asset_list()","asset_list()","cache()","cache_key()","cache_response()","cache_store()","cache_store=()","cached_response()","certificate_tree()","char_id()","char_name()","character_id()","character_ids()","character_name()","character_names()","character_portrait()","character_sheet()","characters()","conquerable_station_list()","constellation_id()","constellation_name()","container_log()","contested_systems()","corp_id()","corp_name()","corp_role()","corporation_id()","corporation_ids()","corporation_name()","corporation_names()","corporation_sheet()","default_template_exists?()","default_template_name()","delegate_to_child()","delegate_to_rowset()","deliver_trust_message()","detect_igb()","dispatch()","error_list()","fac_war_stats()","fac_war_stats()","fac_war_stats()","fac_war_systems()","fac_war_top_stats()","factional_warfare_stats()","factional_warfare_top100()","find_by_code()","igb()","igb?()","included()","included()","included()","industry_jobs()","industry_jobs()","inspect()","journal_entries()","jumps()","kill_log()","kill_log()","kills()","link_to_channel()","link_to_contract()","link_to_destination()","link_to_evemail()","link_to_fitting()","link_to_info()","link_to_mailing_list()","link_to_map()","link_to_market_details()","link_to_preview()","link_to_route()","link_to_trust_request()","link_to_waypoint()","literal_value_for()","mail_messages()","mailing_lists()","market_orders()","market_orders()","medals()","medals()","member_medals()","member_security()","member_security_log()","member_tracking()","militia_id()","militia_name()","nearest_location()","new()","new()","new()","new()","new()","new()","notifications()","parse_children()","prefer_trust()","prefers_trust()","raise()","ref_types()","region_id()","region_name()","request()","request_trust()","require_trust()","requires_trust()","research()","response_for()","server_ip()","server_status()","set()","set_igb()","set_igb_or_default()","shareholders()","ship_id()","skill_in_training()","skill_queue()","skill_tree()","solar_system_id()","solar_system_name()","sovereignty()","standings()","standings()","starbase_detail()","starbase_list()","station_id()","station_name()","system_security()","titles()","to_hash()","to_yaml()","trusted()","trusted?()","type_id()","validation_string()","walk()","wallet_journal()","wallet_journal()","wallet_transactions()","wallet_transactions()","readme"],"longSearchIndex":["eve","eve::api","eve::api::connectivity","eve::api::request","eve::api::response","eve::api::response::result","eve::api::response::row","eve::api::response::rowset","eve::api::services","eve::api::services::account","eve::api::services::character","eve::api::services::corporation","eve::api::services::eve","eve::api::services::map","eve::api::services::misc","eve::api::services::server","eve::errors","eve::errors::authenticationerror","eve::errors::authenticationerrors","eve::errors::authenticationerrors::authenticationfailure","eve::errors::authenticationerrors::cachedkeyauthfailure","eve::errors::authenticationerrors::inadequatesecuritylevel","eve::errors::authenticationerrors::lastauthenticationfailure","eve::errors::authenticationerrors::logindenied","eve::errors::authenticationerrors::missingroles","eve::errors::authenticationerrors::notavailable","eve::errors::authenticationerrors::notinalliance","eve::errors::authenticationerrors::wrongaccount","eve::errors::internalerror","eve::errors::internalerrors","eve::errors::internalerrors::csvmismatch","eve::errors::internalerrors::cacheutilmissing","eve::errors::internalerrors::characterinformationfailure","eve::errors::internalerrors::corporationinformationfailure","eve::errors::internalerrors::factionmemberinformationfailure","eve::errors::internalerrors::invalidaccountkey","eve::errors::internalerrors::invalidattribute","eve::errors::internalerrors::invalidbloodline","eve::errors::internalerrors::invalidcharid","eve::errors::internalerrors::invalidcorpid","eve::errors::internalerrors::invalidcredentials","eve::errors::internalerrors::invalidgender","eve::errors::internalerrors::invalidinput","eve::errors::internalerrors::invalidornotloaded","eve::errors::internalerrors::invalidrace","eve::errors::internalerrors::invalidreftype","eve::errors::internalerrors::invaliduserid","eve::errors::internalerrors::mailnotavailable","eve::errors::internalerrors::medalinformationfailure","eve::errors::internalerrors::missingcorporation","eve::errors::internalerrors::notificationsnotavailable","eve::errors::internalerrors::nullattributeid","eve::errors::internalerrors::rolesqueryfailure","eve::errors::internalerrors::starbasedetailfailure","eve::errors::internalerrors::tqtimefailure","eve::errors::internalerrors::unexpecteddatabasefailure","eve::errors::internalerrors::userinformationfailure","eve::errors::invalidrowset","eve::errors::miscellaneouserror","eve::errors::miscellaneouserrors","eve::errors::miscellaneouserrors::backenddatabasedisabled","eve::errors::miscellaneouserrors::betainprogress","eve::errors::miscellaneouserrors::ratelimited","eve::errors::miscellaneouserrors::sitedatabasedisabled","eve::errors::miscellaneouserrors::testerrorforced","eve::errors::unknownerror","eve::errors::userinputerror","eve::errors::userinputerrors","eve::errors::userinputerrors::accountkeyoutofbounds","eve::errors::userinputerrors::assetsalreadydownloaded","eve::errors::userinputerrors::characternotenlisted","eve::errors::userinputerrors::corporationnotenlisted","eve::errors::userinputerrors::industryjobsalreadydownloaded","eve::errors::userinputerrors::invalidaccountkey","eve::errors::userinputerrors::invalidbeforekillid","eve::errors::userinputerrors::invalidbeforerefid","eve::errors::userinputerrors::invalidbeforetransid","eve::errors::userinputerrors::invalidcharacterid","eve::errors::userinputerrors::invalididlist","eve::errors::userinputerrors::invalidinteger","eve::errors::userinputerrors::invaliditemid","eve::errors::userinputerrors::invalidnamelist","eve::errors::userinputerrors::keynotfound","eve::errors::userinputerrors::killsexhausted","eve::errors::userinputerrors::killsnotloaded","eve::errors::userinputerrors::killspreviouslyloaded","eve::errors::userinputerrors::marketordersalreadydownloaded","eve::errors::userinputerrors::missinguserid","eve::errors::userinputerrors::retrylater","eve::errors::userinputerrors::versionescalationnotallowed","eve::errors::userinputerrors::versionmismatch","eve::errors::userinputerrors::walletexhausted","eve::errors::userinputerrors::walletnotloaded","eve::errors::userinputerrors::walletpreviouslyloaded","eve::javascripthelper","eve::railtie","eve::trust","eve::trust::controllerhelpers","eve::trust::igbinterface","eve::version","eve::api#[]()","eve::api::response::result#[]()","eve::api#[]=()","eve::api::services::character#account_balance()","eve::api::services::corporation#account_balance()","eve::api::response::result#all_fields()","eve::api::services::eve#alliance_id()","eve::trust::igbinterface#alliance_id()","eve::api::services::eve#alliance_ids()","eve::api::services::eve#alliance_list()","eve::api::services::eve#alliance_name()","eve::trust::igbinterface#alliance_name()","eve::api::services::eve#alliance_names()","eve::api::services::character#asset_list()","eve::api::services::corporation#asset_list()","eve::cache()","eve::api::request#cache_key()","eve::api::request#cache_response()","eve::cache_store()","eve::cache_store=()","eve::api::request#cached_response()","eve::api::services::eve#certificate_tree()","eve::trust::igbinterface#char_id()","eve::trust::igbinterface#char_name()","eve::api::services::eve#character_id()","eve::api::services::eve#character_ids()","eve::api::services::eve#character_name()","eve::api::services::eve#character_names()","eve::api::services::misc#character_portrait()","eve::api::services::character#character_sheet()","eve::api::services::account#characters()","eve::api::services::eve#conquerable_station_list()","eve::trust::igbinterface#constellation_id()","eve::trust::igbinterface#constellation_name()","eve::api::services::corporation#container_log()","eve::api::services::map#contested_systems()","eve::trust::igbinterface#corp_id()","eve::trust::igbinterface#corp_name()","eve::trust::igbinterface#corp_role()","eve::api::services::eve#corporation_id()","eve::api::services::eve#corporation_ids()","eve::api::services::eve#corporation_name()","eve::api::services::eve#corporation_names()","eve::api::services::corporation#corporation_sheet()","eve::trust::controllerhelpers#default_template_exists?()","eve::trust::controllerhelpers#default_template_name()","eve::api::response::result#delegate_to_child()","eve::api::response::result#delegate_to_rowset()","eve::trust::controllerhelpers#deliver_trust_message()","eve::trust::controllerhelpers#detect_igb()","eve::api::request#dispatch()","eve::api::services::eve#error_list()","eve::api::services::character#fac_war_stats()","eve::api::services::corporation#fac_war_stats()","eve::api::services::eve#fac_war_stats()","eve::api::services::map#fac_war_systems()","eve::api::services::eve#fac_war_top_stats()","eve::api::services::eve#factional_warfare_stats()","eve::api::services::eve#factional_warfare_top100()","eve::errors::find_by_code()","eve::trust::controllerhelpers#igb()","eve::trust::igbinterface#igb?()","eve::api::services::included()","eve::api::services::character::included()","eve::trust::controllerhelpers::included()","eve::api::services::character#industry_jobs()","eve::api::services::corporation#industry_jobs()","eve::api::response::row#inspect()","eve::api::services::character#journal_entries()","eve::api::services::map#jumps()","eve::api::services::character#kill_log()","eve::api::services::corporation#kill_log()","eve::api::services::map#kills()","eve::javascripthelper#link_to_channel()","eve::javascripthelper#link_to_contract()","eve::javascripthelper#link_to_destination()","eve::javascripthelper#link_to_evemail()","eve::javascripthelper#link_to_fitting()","eve::javascripthelper#link_to_info()","eve::javascripthelper#link_to_mailing_list()","eve::javascripthelper#link_to_map()","eve::javascripthelper#link_to_market_details()","eve::javascripthelper#link_to_preview()","eve::javascripthelper#link_to_route()","eve::javascripthelper#link_to_trust_request()","eve::javascripthelper#link_to_waypoint()","eve::api::response::result#literal_value_for()","eve::api::services::character#mail_messages()","eve::api::services::character#mailing_lists()","eve::api::services::character#market_orders()","eve::api::services::corporation#market_orders()","eve::api::services::character#medals()","eve::api::services::corporation#medals()","eve::api::services::corporation#member_medals()","eve::api::services::corporation#member_security()","eve::api::services::corporation#member_security_log()","eve::api::services::corporation#member_tracking()","eve::trust::igbinterface#militia_id()","eve::trust::igbinterface#militia_name()","eve::trust::igbinterface#nearest_location()","eve::api::new()","eve::api::request::new()","eve::api::response::new()","eve::api::response::row::new()","eve::api::response::rowset::new()","eve::trust::igbinterface::new()","eve::api::services::character#notifications()","eve::api::response::result#parse_children()","eve::trust::controllerhelpers#prefer_trust()","eve::trust::controllerhelpers::prefers_trust()","eve::errors::raise()","eve::api::services::eve#ref_types()","eve::trust::igbinterface#region_id()","eve::trust::igbinterface#region_name()","eve::api::connectivity#request()","eve::javascripthelper#request_trust()","eve::trust::controllerhelpers#require_trust()","eve::trust::controllerhelpers::requires_trust()","eve::api::services::character#research()","eve::api::request#response_for()","eve::trust::igbinterface#server_ip()","eve::api::services::server#server_status()","eve::api#set()","eve::trust::controllerhelpers#set_igb()","eve::trust::controllerhelpers#set_igb_or_default()","eve::api::services::corporation#shareholders()","eve::trust::igbinterface#ship_id()","eve::api::services::character#skill_in_training()","eve::api::services::character#skill_queue()","eve::api::services::eve#skill_tree()","eve::trust::igbinterface#solar_system_id()","eve::trust::igbinterface#solar_system_name()","eve::api::services::map#sovereignty()","eve::api::services::character#standings()","eve::api::services::corporation#standings()","eve::api::services::corporation#starbase_detail()","eve::api::services::corporation#starbase_list()","eve::trust::igbinterface#station_id()","eve::trust::igbinterface#station_name()","eve::trust::igbinterface#system_security()","eve::api::services::corporation#titles()","eve::api::response::result#to_hash()","eve::api::response::result#to_yaml()","eve::trust::igbinterface#trusted()","eve::trust::igbinterface#trusted?()","eve::javascripthelper#type_id()","eve::trust::igbinterface#validation_string()","eve::api::connectivity#walk()","eve::api::services::character#wallet_journal()","eve::api::services::corporation#wallet_journal()","eve::api::services::character#wallet_transactions()","eve::api::services::corporation#wallet_transactions()",""],"info":[["Eve","","Eve.html","",""],["Eve::API","","Eve/API.html","","<p>Eve API Libraries\n<p>EVE Online has made available various APIs which allow for querying the\nserver for information ...\n"],["Eve::API::Connectivity","","Eve/API/Connectivity.html","",""],["Eve::API::Request","","Eve/API/Request.html","",""],["Eve::API::Response","","Eve/API/Response.html","",""],["Eve::API::Response::Result","","Eve/API/Response/Result.html","",""],["Eve::API::Response::Row","","Eve/API/Response/Row.html","",""],["Eve::API::Response::Rowset","","Eve/API/Response/Rowset.html","",""],["Eve::API::Services","","Eve/API/Services.html","",""],["Eve::API::Services::Account","","Eve/API/Services/Account.html","",""],["Eve::API::Services::Character","","Eve/API/Services/Character.html","",""],["Eve::API::Services::Corporation","","Eve/API/Services/Corporation.html","",""],["Eve::API::Services::Eve","","Eve/API/Services/Eve.html","",""],["Eve::API::Services::Map","","Eve/API/Services/Map.html","",""],["Eve::API::Services::Misc","","Eve/API/Services/Misc.html","",""],["Eve::API::Services::Server","","Eve/API/Services/Server.html","",""],["Eve::Errors","","Eve/Errors.html","",""],["Eve::Errors::AuthenticationError","","Eve/Errors/AuthenticationError.html","","<p>2xx - authentication/security/credentials error\n"],["Eve::Errors::AuthenticationErrors","","Eve/Errors/AuthenticationErrors.html","",""],["Eve::Errors::AuthenticationErrors::AuthenticationFailure","","Eve/Errors/AuthenticationErrors/AuthenticationFailure.html","","<p>203 - Authentication failure. 204 - Authentication failure. 210 -\nAuthentication failure.\n"],["Eve::Errors::AuthenticationErrors::CachedKeyAuthFailure","","Eve/Errors/AuthenticationErrors/CachedKeyAuthFailure.html","","<p>202 - Cached API key authentication failure.\n"],["Eve::Errors::AuthenticationErrors::InadequateSecurityLevel","","Eve/Errors/AuthenticationErrors/InadequateSecurityLevel.html","","<p>200 - Security level not high enough.\n"],["Eve::Errors::AuthenticationErrors::LastAuthenticationFailure","","Eve/Errors/AuthenticationErrors/LastAuthenticationFailure.html","","<p>205 - Authentication failure (final pass). 212 - Authentication failure\n(final pass).\n"],["Eve::Errors::AuthenticationErrors::LoginDenied","","Eve/Errors/AuthenticationErrors/LoginDenied.html","","<p>211 - Login denied by account status.\n"],["Eve::Errors::AuthenticationErrors::MissingRoles","","Eve/Errors/AuthenticationErrors/MissingRoles.html","","<p>206 - Character must have Accountant or Junior Accountant roles. 208 -\nCharacter must have Accountant ...\n"],["Eve::Errors::AuthenticationErrors::NotAvailable","","Eve/Errors/AuthenticationErrors/NotAvailable.html","","<p>207 - Not available for NPC corporations.\n"],["Eve::Errors::AuthenticationErrors::NotInAlliance","","Eve/Errors/AuthenticationErrors/NotInAlliance.html","","<p>214 - Corporation is not part of alliance.\n"],["Eve::Errors::AuthenticationErrors::WrongAccount","","Eve/Errors/AuthenticationErrors/WrongAccount.html","","<p>201 - Character does not belong to account.\n"],["Eve::Errors::InternalError","","Eve/Errors/InternalError.html","","<p>5xx - Internal error (we did something bad)\n"],["Eve::Errors::InternalErrors","","Eve/Errors/InternalErrors.html","",""],["Eve::Errors::InternalErrors::CSVMismatch","","Eve/Errors/InternalErrors/CSVMismatch.html","","<p>517 - CSV header/row count mismatch.\n"],["Eve::Errors::InternalErrors::CacheUtilMissing","","Eve/Errors/InternalErrors/CacheUtilMissing.html","","<p>502 - CacheUtil(#) seems to not be in the configuration.\n"],["Eve::Errors::InternalErrors::CharacterInformationFailure","","Eve/Errors/InternalErrors/CharacterInformationFailure.html","","<p>522 - Failed getting character information.\n"],["Eve::Errors::InternalErrors::CorporationInformationFailure","","Eve/Errors/InternalErrors/CorporationInformationFailure.html","","<p>523 - Failed getting corporation information.\n"],["Eve::Errors::InternalErrors::FactionMemberInformationFailure","","Eve/Errors/InternalErrors/FactionMemberInformationFailure.html","","<p>524 - Failed getting faction member information.\n"],["Eve::Errors::InternalErrors::InvalidAccountKey","","Eve/Errors/InternalErrors/InvalidAccountKey.html","","<p>511 - AccountCanQuery(#): invalid accountKey.\n"],["Eve::Errors::InternalErrors::InvalidAttribute","","Eve/Errors/InternalErrors/InvalidAttribute.html","","<p>507 - GetAttribute(#): invalid attribute.\n"],["Eve::Errors::InternalErrors::InvalidBloodline","","Eve/Errors/InternalErrors/InvalidBloodline.html","","<p>506 - GetBloodline(#): invalid bloodline.\n"],["Eve::Errors::InternalErrors::InvalidCharID","","Eve/Errors/InternalErrors/InvalidCharID.html","","<p>512 - Invalid charID passed to CharData.GetCharacter()\n"],["Eve::Errors::InternalErrors::InvalidCorpID","","Eve/Errors/InternalErrors/InvalidCorpID.html","","<p>514 - Invalid corpID passed to CorpData.GetCorporation().\n"],["Eve::Errors::InternalErrors::InvalidCredentials","","Eve/Errors/InternalErrors/InvalidCredentials.html","","<p>521 - Invalid username and/or password passed to UserData.LoginWebUser().\n"],["Eve::Errors::InternalErrors::InvalidGender","","Eve/Errors/InternalErrors/InvalidGender.html","","<p>505 - GetGender(#): invalid gender.\n"],["Eve::Errors::InternalErrors::InvalidInput","","Eve/Errors/InternalErrors/InvalidInput.html","","<p>503 - GetSkillpointsForLevel(#, #): invalid input.\n"],["Eve::Errors::InternalErrors::InvalidOrNotLoaded","","Eve/Errors/InternalErrors/InvalidOrNotLoaded.html","","<p>500 - GetName(#) is invalid or not loaded. 501 - GetID(#) is invalid or not\nloaded.\n"],["Eve::Errors::InternalErrors::InvalidRace","","Eve/Errors/InternalErrors/InvalidRace.html","","<p>504 - GetRace(#): invalid race.\n"],["Eve::Errors::InternalErrors::InvalidRefType","","Eve/Errors/InternalErrors/InvalidRefType.html","","<p>508 - GetRefType(#): invalid reftype.\n"],["Eve::Errors::InternalErrors::InvalidUserID","","Eve/Errors/InternalErrors/InvalidUserID.html","","<p>515 - Invalid userID and/or apiKey passed to UserData.GetUser().\n"],["Eve::Errors::InternalErrors::MailNotAvailable","","Eve/Errors/InternalErrors/MailNotAvailable.html","","<p>527 - Mail for this character is not yet accessible.\n"],["Eve::Errors::InternalErrors::MedalInformationFailure","","Eve/Errors/InternalErrors/MedalInformationFailure.html","","<p>525 - Failed getting medal information.\n"],["Eve::Errors::InternalErrors::MissingCorporation","","Eve/Errors/InternalErrors/MissingCorporation.html","","<p>510 - Character does not appear to have a corporation.  Not loaded?\n"],["Eve::Errors::InternalErrors::NotificationsNotAvailable","","Eve/Errors/InternalErrors/NotificationsNotAvailable.html","","<p>526 - Notifications for this character is not yet accessible.\n"],["Eve::Errors::InternalErrors::NullAttributeID","","Eve/Errors/InternalErrors/NullAttributeID.html","","<p>509 - attributeID # has null data components.\n"],["Eve::Errors::InternalErrors::RolesQueryFailure","","Eve/Errors/InternalErrors/RolesQueryFailure.html","","<p>513 - Failed to get character roles in corporation.\n"],["Eve::Errors::InternalErrors::StarbaseDetailFailure","","Eve/Errors/InternalErrors/StarbaseDetailFailure.html","","<p>519 - Failed getting starbase detail information.\n"],["Eve::Errors::InternalErrors::TQTimeFailure","","Eve/Errors/InternalErrors/TQTimeFailure.html","","<p>518 - Unable to get current TQ time.\n"],["Eve::Errors::InternalErrors::UnexpectedDatabaseFailure","","Eve/Errors/InternalErrors/UnexpectedDatabaseFailure.html","","<p>520 - Unexpected failure accessing database.\n"],["Eve::Errors::InternalErrors::UserInformationFailure","","Eve/Errors/InternalErrors/UserInformationFailure.html","","<p>516 - Failed getting user information.\n"],["Eve::Errors::InvalidRowset","","Eve/Errors/InvalidRowset.html","","<p>Raised when a rowset cannot be processed.\n"],["Eve::Errors::MiscellaneousError","","Eve/Errors/MiscellaneousError.html","","<p>9xx - Miscellaneous\n"],["Eve::Errors::MiscellaneousErrors","","Eve/Errors/MiscellaneousErrors.html","",""],["Eve::Errors::MiscellaneousErrors::BackendDatabaseDisabled","","Eve/Errors/MiscellaneousErrors/BackendDatabaseDisabled.html","","<p>902 - EVE backend database temporarily disabled.\n"],["Eve::Errors::MiscellaneousErrors::BetaInProgress","","Eve/Errors/MiscellaneousErrors/BetaInProgress.html","","<p>900 - Beta in progress, access denied.\n"],["Eve::Errors::MiscellaneousErrors::RateLimited","","Eve/Errors/MiscellaneousErrors/RateLimited.html","","<p>903 - Rate limited [#]: please obey all cachedUntil timers.\n"],["Eve::Errors::MiscellaneousErrors::SiteDatabaseDisabled","","Eve/Errors/MiscellaneousErrors/SiteDatabaseDisabled.html","","<p>901 - Web site database temporarily disabled.\n"],["Eve::Errors::MiscellaneousErrors::TestErrorForced","","Eve/Errors/MiscellaneousErrors/TestErrorForced.html","","<p>999 - User forced test error condition.\n"],["Eve::Errors::UnknownError","","Eve/Errors/UnknownError.html","","<p>Raised when something goes wrong and no other error can be found.\n"],["Eve::Errors::UserInputError","","Eve/Errors/UserInputError.html","","<p>1xx - User Input Error\n"],["Eve::Errors::UserInputErrors","","Eve/Errors/UserInputErrors.html","",""],["Eve::Errors::UserInputErrors::AccountKeyOutOfBounds","","Eve/Errors/UserInputErrors/AccountKeyOutOfBounds.html","","<p>109 - Invalid accountKey: must be in the range 1000 to 1006.\n"],["Eve::Errors::UserInputErrors::AssetsAlreadyDownloaded","","Eve/Errors/UserInputErrors/AssetsAlreadyDownloaded.html","","<p>115 - Assets already downloaded: retry after #.\n"],["Eve::Errors::UserInputErrors::CharacterNotEnlisted","","Eve/Errors/UserInputErrors/CharacterNotEnlisted.html","","<p>124 - Character not enlisted in Factional Warfare.\n"],["Eve::Errors::UserInputErrors::CorporationNotEnlisted","","Eve/Errors/UserInputErrors/CorporationNotEnlisted.html","","<p>125 - Corporation not enlisted in Factional Warfare.\n"],["Eve::Errors::UserInputErrors::IndustryJobsAlreadyDownloaded","","Eve/Errors/UserInputErrors/IndustryJobsAlreadyDownloaded.html","","<p>116 - Industry jobs already downloaded: retry after #.\n"],["Eve::Errors::UserInputErrors::InvalidAccountKey","","Eve/Errors/UserInputErrors/InvalidAccountKey.html","","<p>108 - Invalid accountKey provided.\n"],["Eve::Errors::UserInputErrors::InvalidBeforeKillID","","Eve/Errors/UserInputErrors/InvalidBeforeKillID.html","","<p>121 - Invalid beforeKillID provided.\n"],["Eve::Errors::UserInputErrors::InvalidBeforeRefID","","Eve/Errors/UserInputErrors/InvalidBeforeRefID.html","","<p>107 - Invalid beforeRefID provided.\n"],["Eve::Errors::UserInputErrors::InvalidBeforeTransID","","Eve/Errors/UserInputErrors/InvalidBeforeTransID.html","","<p>110 - Invalid beforeTransID provided.\n"],["Eve::Errors::UserInputErrors::InvalidCharacterID","","Eve/Errors/UserInputErrors/InvalidCharacterID.html","","<p>105 - Invalid characterID.\n"],["Eve::Errors::UserInputErrors::InvalidIDList","","Eve/Errors/UserInputErrors/InvalidIDList.html","","<p>123 - Invalid or missing list of IDs.\n"],["Eve::Errors::UserInputErrors::InvalidInteger","","Eve/Errors/UserInputErrors/InvalidInteger.html","","<p>111 - '#' is not a valid integer.\n"],["Eve::Errors::UserInputErrors::InvalidItemID","","Eve/Errors/UserInputErrors/InvalidItemID.html","","<p>114 - Invalid itemID provided.\n"],["Eve::Errors::UserInputErrors::InvalidNameList","","Eve/Errors/UserInputErrors/InvalidNameList.html","","<p>122 - Invalid or missing list of names.\n"],["Eve::Errors::UserInputErrors::KeyNotFound","","Eve/Errors/UserInputErrors/KeyNotFound.html","","<p>104 - GetAccountByKey(#): key not found.\n"],["Eve::Errors::UserInputErrors::KillsExhausted","","Eve/Errors/UserInputErrors/KillsExhausted.html","","<p>119 - Kills exhausted: retry after #.\n"],["Eve::Errors::UserInputErrors::KillsNotLoaded","","Eve/Errors/UserInputErrors/KillsNotLoaded.html","","<p>118 - Expected beforeKillID = 0: wallet not previously loaded.\n"],["Eve::Errors::UserInputErrors::KillsPreviouslyLoaded","","Eve/Errors/UserInputErrors/KillsPreviouslyLoaded.html","","<p>120 - Expected beforeKillID [#] but supplied [#]: kills previously loaded.\n"],["Eve::Errors::UserInputErrors::MarketOrdersAlreadyDownloaded","","Eve/Errors/UserInputErrors/MarketOrdersAlreadyDownloaded.html","","<p>117 - Market orders already downloaded: retry after #.\n"],["Eve::Errors::UserInputErrors::MissingUserID","","Eve/Errors/UserInputErrors/MissingUserID.html","","<p>106 - Must provide userID parameter for authentication.\n"],["Eve::Errors::UserInputErrors::RetryLater","","Eve/Errors/UserInputErrors/RetryLater.html","","<p>103 - Already returned one week of data: retry after #.\n"],["Eve::Errors::UserInputErrors::VersionEscalationNotAllowed","","Eve/Errors/UserInputErrors/VersionEscalationNotAllowed.html","","<p>113 - Version escalation is not allowed at this time.\n"],["Eve::Errors::UserInputErrors::VersionMismatch","","Eve/Errors/UserInputErrors/VersionMismatch.html","","<p>112 - Version mismatch.\n"],["Eve::Errors::UserInputErrors::WalletExhausted","","Eve/Errors/UserInputErrors/WalletExhausted.html","","<p>101 - Wallet exhausted: retry after #.\n"],["Eve::Errors::UserInputErrors::WalletNotLoaded","","Eve/Errors/UserInputErrors/WalletNotLoaded.html","","<p>100 - Expected beforeRefID = 0: wallet not previously loaded.\n"],["Eve::Errors::UserInputErrors::WalletPreviouslyLoaded","","Eve/Errors/UserInputErrors/WalletPreviouslyLoaded.html","","<p>102 - Expected beforeRefID [#], got [#]: wallet previously loaded.\n"],["Eve::JavascriptHelper","","Eve/JavascriptHelper.html","","<p>In addition to the helpers listed below, this library also exposes the\n\"igb\" method as described ...\n"],["Eve::Railtie","","Eve/Railtie.html","",""],["Eve::Trust","","Eve/Trust.html","","<p>Trust\n<p>The primary purpose for the ActionController is to figure out which View\nshould be rendered, and ...\n"],["Eve::Trust::ControllerHelpers","","Eve/Trust/ControllerHelpers.html","",""],["Eve::Trust::IgbInterface","","Eve/Trust/IgbInterface.html","",""],["Eve::Version","","Eve/Version.html","",""],["[]","Eve::API","Eve/API.html#method-i-5B-5D","(key)",""],["[]","Eve::API::Response::Result","Eve/API/Response/Result.html#method-i-5B-5D","(name)",""],["[]=","Eve::API","Eve/API.html#method-i-5B-5D-3D","(key, value)",""],["account_balance","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-account_balance","()","<p>full API key\n"],["account_balance","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-account_balance","()","<p>full API key\n"],["all_fields","Eve::API::Response::Result","Eve/API/Response/Result.html#method-i-all_fields","()",""],["alliance_id","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-alliance_id","(*names)",""],["alliance_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-alliance_id","()",""],["alliance_ids","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-alliance_ids","(*names)",""],["alliance_list","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-alliance_list","()",""],["alliance_name","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-alliance_name","(*ids)",""],["alliance_name","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-alliance_name","()",""],["alliance_names","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-alliance_names","(*ids)",""],["asset_list","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-asset_list","(version = nil)","<p>full API key\n"],["asset_list","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-asset_list","()","<p>full API key\n"],["cache","Eve","Eve.html#method-c-cache","()",""],["cache_key","Eve::API::Request","Eve/API/Request.html#method-i-cache_key","()",""],["cache_response","Eve::API::Request","Eve/API/Request.html#method-i-cache_response","()",""],["cache_store","Eve","Eve.html#method-c-cache_store","()",""],["cache_store=","Eve","Eve.html#method-c-cache_store-3D","(a)",""],["cached_response","Eve::API::Request","Eve/API/Request.html#method-i-cached_response","()",""],["certificate_tree","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-certificate_tree","()",""],["char_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-char_id","()",""],["char_name","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-char_name","()",""],["character_id","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-character_id","(*names)","<p>Character ID to Name conversion. Accepts a list of character names, and\nreturns the name for each name ...\n"],["character_ids","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-character_ids","(*names)",""],["character_name","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-character_name","(*ids)","<p>Character ID to Name conversion. Accepts a list of character IDs, and\nreturns the name for each ID in ...\n"],["character_names","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-character_names","(*ids)",""],["character_portrait","Eve::API::Services::Misc","Eve/API/Services/Misc.html#method-i-character_portrait","(character_id, options = { :size => 64 })","<p>Returns a binary String representing a JPEG image that is the portrait of\nthe character with the specified ...\n"],["character_sheet","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-character_sheet","()","<p>limited API key\n"],["characters","Eve::API::Services::Account","Eve/API/Services/Account.html#method-i-characters","()",""],["conquerable_station_list","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-conquerable_station_list","()",""],["constellation_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-constellation_id","()","<p>The IGB does not yet supply the proper headers for this method, so it will\nalways return nil. However ...\n"],["constellation_name","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-constellation_name","()",""],["container_log","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-container_log","()","<p>full API key\n"],["contested_systems","Eve::API::Services::Map","Eve/API/Services/Map.html#method-i-contested_systems","()",""],["corp_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-corp_id","()",""],["corp_name","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-corp_name","()",""],["corp_role","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-corp_role","()",""],["corporation_id","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-corporation_id","(*names)",""],["corporation_ids","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-corporation_ids","(*names)",""],["corporation_name","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-corporation_name","(*ids)",""],["corporation_names","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-corporation_names","(*ids)",""],["corporation_sheet","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-corporation_sheet","(corporation_id = nil)","<p>limited or no API key\n"],["default_template_exists?","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-default_template_exists-3F","(format = request.format)",""],["default_template_name","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-default_template_name","()",""],["delegate_to_child","Eve::API::Response::Result","Eve/API/Response/Result.html#method-i-delegate_to_child","(field_name, node)",""],["delegate_to_rowset","Eve::API::Response::Result","Eve/API/Response/Result.html#method-i-delegate_to_rowset","(field_name, rowset)",""],["deliver_trust_message","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-deliver_trust_message","(trust_message = self.class.trust_message)",""],["detect_igb","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-detect_igb","()",""],["dispatch","Eve::API::Request","Eve/API/Request.html#method-i-dispatch","()",""],["error_list","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-error_list","()",""],["fac_war_stats","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-fac_war_stats","()","<p>limited API key\n"],["fac_war_stats","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-fac_war_stats","()","<p>limited API key\n"],["fac_war_stats","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-fac_war_stats","()",""],["fac_war_systems","Eve::API::Services::Map","Eve/API/Services/Map.html#method-i-fac_war_systems","()","<p>Returns the sovereignty status of all solar systems. Warning: This is a lot\nof data!\n<p>Returns an object ...\n"],["fac_war_top_stats","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-fac_war_top_stats","()",""],["factional_warfare_stats","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-factional_warfare_stats","()",""],["factional_warfare_top100","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-factional_warfare_top100","()",""],["find_by_code","Eve::Errors","Eve/Errors.html#method-c-find_by_code","(code)","<p>Returns an error class by its code. If a match cannot be found, the closest\nmatch is used instead. For ...\n"],["igb","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-igb","()",""],["igb?","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-igb-3F","()",""],["included","Eve::API::Services","Eve/API/Services.html#method-c-included","(base)",""],["included","Eve::API::Services::Character","Eve/API/Services/Character.html#method-c-included","(base)",""],["included","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-c-included","(base)",""],["industry_jobs","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-industry_jobs","()","<p>full API key\n"],["industry_jobs","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-industry_jobs","()","<p>full API key\n"],["inspect","Eve::API::Response::Row","Eve/API/Response/Row.html#method-i-inspect","()",""],["journal_entries","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-journal_entries","(account_key = 1000, options = { })",""],["jumps","Eve::API::Services::Map","Eve/API/Services/Map.html#method-i-jumps","()","<p>Returns the sovereignty status of all solar systems. Warning: This is a lot\nof data!\n<p>Returns an object ...\n"],["kill_log","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-kill_log","(options = {})","<p>This API call only returns 1000 entries. Often, you will need to gather all\nentries, and not just the ...\n"],["kill_log","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-kill_log","(options = {})","<p>This API call only returns 1000 entries. Often, you will need to gather all\nentries, and not just the ...\n"],["kills","Eve::API::Services::Map","Eve/API/Services/Map.html#method-i-kills","()","<p>Returns the sovereignty status of all solar systems. Warning: This is a lot\nof data!\n<p>Returns an object ...\n"],["link_to_channel","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_channel","(text, channel_name, *args)","<p>Causes the user to attempt to join the named channel. Normal channel access\ncontrol rules apply. If the ...\n"],["link_to_contract","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_contract","(text, solar_system_id, contract_id, *args)","<p>Creatse a hyperlink that results in opening the contract window and\ndisplaying the contract represented ...\n"],["link_to_destination","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_destination","(text, solar_system_id, *args)","<p>Sets the client's autopilot destination to the specified solar system.\n\n<pre>solar_system_id (Number)\n  The ...</pre>\n"],["link_to_evemail","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_evemail","(text, *args)","<p>Creates a hyperlink that results in opening the client's EVE mail inbox.\n"],["link_to_fitting","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_fitting","(text, ship_dna_string, *args)","<p>Creates a hyperlink that results in opening the fitting window and displays\nthe fitting represented by ...\n"],["link_to_info","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_info","(text, type_id, item_id = nil, *args)","<p>Creates a hyperlink that results in the \"show info\" dialog being displayed\non the client's ...\n"],["link_to_mailing_list","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_mailing_list","(text, mailing_list_name, *args)","<p>Causes the user to subscribe to the named mailing list.\n\n<pre>mailing_list_name (String)\n  The name of the mailing ...</pre>\n"],["link_to_map","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_map","(text, system_id = nil, *args)","<p>Creates a hyperlink that results in opening the map. If system_id is given,\nthe map will focus on that ...\n"],["link_to_market_details","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_market_details","(text, type_id, *args)","<p>Creates a hyperlink which results in opening the market details window and\ndisplays the information about ...\n"],["link_to_preview","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_preview","(text, type_id, *args)","<p>Creates a hyperlink that results in opening the preview window for type_id.\n\n<pre>type_id (Number)\n  Type ID ...</pre>\n"],["link_to_route","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_route","(text, destination_id, source_id = nil, *args)","<p>Creates a hyperlink that results in showing the route to the destination_id\nfrom the source_id. If source_id ...\n"],["link_to_trust_request","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_trust_request","(text, trust_url = \"http://#{request.host}/\", *args)","<p>Produces a hyperlink that will result in a pop-up a trust prompt in the\nclient, allowing the user to ...\n"],["link_to_waypoint","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-link_to_waypoint","(text, solar_system_id, *args)","<p>Adds the specified solar system to the end of the client's autopilot route.\nIf the solar system is already ...\n"],["literal_value_for","Eve::API::Response::Result","Eve/API/Response/Result.html#method-i-literal_value_for","(str)",""],["mail_messages","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-mail_messages","()","<p>full API key\n"],["mailing_lists","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-mailing_lists","()","<p>full API key\n"],["market_orders","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-market_orders","()","<p>full API key\n"],["market_orders","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-market_orders","()","<p>full API key\n"],["medals","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-medals","()","<p>limited API key\n"],["medals","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-medals","()","<p>limited API key\n"],["member_medals","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-member_medals","()","<p>limited API key\n"],["member_security","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-member_security","()","<p>full API key\n"],["member_security_log","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-member_security_log","()","<p>full API key\n"],["member_tracking","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-member_tracking","()","<p>full API key\n"],["militia_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-militia_id","()","<p>The IGB does not yet supply the proper headers for this method, so it will\nalways return nil. However ...\n"],["militia_name","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-militia_name","()","<p>The IGB does not yet supply the proper headers for this method, so it will\nalways return nil. However ...\n"],["nearest_location","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-nearest_location","()","<p>Removed from Dominion, so always returns nil\n"],["new","Eve::API","Eve/API.html#method-c-new","(options = {})",""],["new","Eve::API::Request","Eve/API/Request.html#method-c-new","(namespace, service, options = {})",""],["new","Eve::API::Response","Eve/API/Response.html#method-c-new","(xml, options = {})",""],["new","Eve::API::Response::Row","Eve/API/Response/Row.html#method-c-new","(row, columns = row.attribute_nodes.collect { |c| c.name })",""],["new","Eve::API::Response::Rowset","Eve/API/Response/Rowset.html#method-c-new","(rowset)",""],["new","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-c-new","(request)",""],["notifications","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-notifications","()","<p>full API key\n"],["parse_children","Eve::API::Response::Result","Eve/API/Response/Result.html#method-i-parse_children","(node)",""],["prefer_trust","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-prefer_trust","(trust_message = self.class.trust_message)",""],["prefers_trust","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-c-prefers_trust","(message = trust_message)",""],["raise","Eve::Errors","Eve/Errors.html#method-c-raise","(*several_variants)",""],["ref_types","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-ref_types","()","<p>Returns a list of transaction types used in the Journal Entries Response\nExample:\n\n<pre>result = api.eve.ref_types ...</pre>\n"],["region_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-region_id","()","<p>The IGB does not yet supply the proper headers for this method, so it will\nalways return nil. However ...\n"],["region_name","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-region_name","()",""],["request","Eve::API::Connectivity","Eve/API/Connectivity.html#method-i-request","(namespace, service_name, options = {})",""],["request_trust","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-request_trust","(trust_url = \"http://#{request.host}/\", *args)","<p>This will generate a method call that produces a pop-up a trust prompt in\nthe client, allowing the user ...\n"],["require_trust","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-require_trust","(trust_message = self.class.trust_message)",""],["requires_trust","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-c-requires_trust","(message = trust_message)",""],["research","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-research","()","<p>full API key\n"],["response_for","Eve::API::Request","Eve/API/Request.html#method-i-response_for","(body)",""],["server_ip","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-server_ip","()",""],["server_status","Eve::API::Services::Server","Eve/API/Services/Server.html#method-i-server_status","()","<p>Returns the current server status.\n\n<pre>&gt;&gt; puts Eve::API.new.server_status.to_yaml\n---\ncurrent_time: 2010-03-14T04:41:51+00:00 ...</pre>\n"],["set","Eve::API","Eve/API.html#method-i-set","(key, value = nil)",""],["set_igb","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-set_igb","()",""],["set_igb_or_default","Eve::Trust::ControllerHelpers","Eve/Trust/ControllerHelpers.html#method-i-set_igb_or_default","()",""],["shareholders","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-shareholders","()","<p>full API key\n"],["ship_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-ship_id","()","<p>The IGB does not yet supply the proper headers for this method, so it will\nalways return nil. However ...\n"],["skill_in_training","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-skill_in_training","()","<p>limited API key\n"],["skill_queue","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-skill_queue","()","<p>limited API key\n"],["skill_tree","Eve::API::Services::Eve","Eve/API/Services/Eve.html#method-i-skill_tree","()",""],["solar_system_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-solar_system_id","()","<p>The IGB does not yet supply the proper headers for this method, so it will\nalways return nil. However ...\n"],["solar_system_name","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-solar_system_name","()",""],["sovereignty","Eve::API::Services::Map","Eve/API/Services/Map.html#method-i-sovereignty","()","<p>Returns the sovereignty status of all solar systems. Warning: This is a lot\nof data!\n<p>Returns an object ...\n"],["standings","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-standings","()","<p>limited API key\n"],["standings","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-standings","()","<p>full API key\n"],["starbase_detail","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-starbase_detail","(item_id, version = 2)",""],["starbase_list","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-starbase_list","()",""],["station_id","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-station_id","()",""],["station_name","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-station_name","()",""],["system_security","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-system_security","()","<p>The IGB does not yet supply the proper headers for this method, so it will\nalways return nil. However ...\n"],["titles","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-titles","()","<p>full API key\n"],["to_hash","Eve::API::Response::Result","Eve/API/Response/Result.html#method-i-to_hash","()",""],["to_yaml","Eve::API::Response::Result","Eve/API/Response/Result.html#method-i-to_yaml","(*args)",""],["trusted","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-trusted","()",""],["trusted?","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-trusted-3F","()",""],["type_id","Eve::JavascriptHelper","Eve/JavascriptHelper.html#method-i-type_id","(which)","<p>Returns the numeric type ID for a string, so you don't have to manage\n\"magic numbers\" in your ...\n"],["validation_string","Eve::Trust::IgbInterface","Eve/Trust/IgbInterface.html#method-i-validation_string","()","<p>Validation string (HTTP_EVE_VALIDATION_STRING) is only a wishlist item, and\nis not actually implemented ...\n"],["walk","Eve::API::Connectivity","Eve/API/Connectivity.html#method-i-walk","(walk_id, walk_association, options = {}, &block)",""],["wallet_journal","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-wallet_journal","(account_key = 1000, options = { })","<p>This API call only returns 1000 entries. Often, you will need to gather all\nentries, and not just the ...\n"],["wallet_journal","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-wallet_journal","(account_key = 1000, options = {})","<p>This API call only returns 1000 entries. Often, you will need to gather all\nentries, and not just the ...\n"],["wallet_transactions","Eve::API::Services::Character","Eve/API/Services/Character.html#method-i-wallet_transactions","(options = {})","<p>This API call only returns 1000 entries. Often, you will need to gather all\nentries, and not just the ...\n"],["wallet_transactions","Eve::API::Services::Corporation","Eve/API/Services/Corporation.html#method-i-wallet_transactions","(account_key = 1000, options = {})","<p>This API call only returns 1000 entries. Often, you will need to gather all\nentries, and not just the ...\n"],["README","","README_rdoc.html","","<p>eve\n<p>github.com/sinisterchipmunk/eve\n\n<p>DESCRIPTION:\n"]]}}